#include <cxxtest/TestSuite.h>
#include <moses/moses/main/populate_atomspace.h>
#include <moses/data/table/table.h>
#include <moses/data/table/table_io.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/value/Value.h>
#include <opencog/rule-engine/forwardchainer/ForwardChainer.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Atom.h>
//#include <opencog/atomspace/AtomSpace.h>
#include <opencog/truthvalue/AttentionValue.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/truthvalue/TruthValue.h>
#include <opencog/query/BindLinkAPI.h>


#include <boost/algorithm/string/trim.hpp>
#include <boost/format.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/variant.hpp>


using namespace opencog;
using namespace moses;
using namespace combo;
using namespace std;

class populateAtomSpaceUTest : public CxxTest::TestSuite {
public:
	string f1;
	string f2;
	ValuePtr feature1;
	ValuePtr feature2;
	vector<ValuePtr> values_vec1;
	vector<ValuePtr> values_vec2;
void test_my3() {
 AtomSpace as;
 Handle h = as.add_node(NUMBER_NODE, "2");
 Handle y=as.add_node(NUMBER_NODE,"3");
 Handle l=as.add_link(PLUS_LINK,h,y);

 cout<<l->getOutgoingSet();

cout<<h->getIncomingSet();
 

}

};
